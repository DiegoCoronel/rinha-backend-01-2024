/*
 * This file is generated by jOOQ.
 */
package br.rinha.meta.tables;


import br.rinha.meta.Indexes;
import br.rinha.meta.Keys;
import br.rinha.meta.Public;
import br.rinha.meta.tables.records.TransacaoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transacao extends TableImpl<TransacaoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transacao</code>
     */
    public static final Transacao TRANSACAO = new Transacao();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransacaoRecord> getRecordType() {
        return TransacaoRecord.class;
    }

    /**
     * The column <code>public.transacao.id_cliente</code>.
     */
    public final TableField<TransacaoRecord, Long> ID_CLIENTE = createField(DSL.name("id_cliente"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transacao.valor</code>.
     */
    public final TableField<TransacaoRecord, Integer> VALOR = createField(DSL.name("valor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transacao.realizada_em</code>.
     */
    public final TableField<TransacaoRecord, LocalDateTime> REALIZADA_EM = createField(DSL.name("realizada_em"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.transacao.tipo</code>.
     */
    public final TableField<TransacaoRecord, String> TIPO = createField(DSL.name("tipo"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.transacao.descricao</code>.
     */
    public final TableField<TransacaoRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private Transacao(Name alias, Table<TransacaoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transacao(Name alias, Table<TransacaoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transacao</code> table reference
     */
    public Transacao(String alias) {
        this(DSL.name(alias), TRANSACAO);
    }

    /**
     * Create an aliased <code>public.transacao</code> table reference
     */
    public Transacao(Name alias) {
        this(alias, TRANSACAO);
    }

    /**
     * Create a <code>public.transacao</code> table reference
     */
    public Transacao() {
        this(DSL.name("transacao"), null);
    }

    public <O extends Record> Transacao(Table<O> child, ForeignKey<O, TransacaoRecord> key) {
        super(child, key, TRANSACAO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ID_CLIENTE_IDX, Indexes.REALIZADA_EM_IDX);
    }

    @Override
    public List<ForeignKey<TransacaoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACAO__TRANSACAO_CLIENTE_ID_IDX);
    }

    private transient Cliente _cliente;

    /**
     * Get the implicit join path to the <code>public.cliente</code> table.
     */
    public Cliente cliente() {
        if (_cliente == null)
            _cliente = new Cliente(this, Keys.TRANSACAO__TRANSACAO_CLIENTE_ID_IDX);

        return _cliente;
    }

    @Override
    public Transacao as(String alias) {
        return new Transacao(DSL.name(alias), this);
    }

    @Override
    public Transacao as(Name alias) {
        return new Transacao(alias, this);
    }

    @Override
    public Transacao as(Table<?> alias) {
        return new Transacao(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transacao rename(String name) {
        return new Transacao(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transacao rename(Name name) {
        return new Transacao(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transacao rename(Table<?> name) {
        return new Transacao(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Integer, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Integer, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
