/*
 * This file is generated by jOOQ.
 */
package br.rinha.meta.tables;


import br.rinha.meta.Keys;
import br.rinha.meta.Public;
import br.rinha.meta.tables.records.ClienteRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cliente extends TableImpl<ClienteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cliente</code>
     */
    public static final Cliente CLIENTE = new Cliente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClienteRecord> getRecordType() {
        return ClienteRecord.class;
    }

    /**
     * The column <code>public.cliente.id</code>.
     */
    public final TableField<ClienteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.cliente.limite</code>.
     */
    public final TableField<ClienteRecord, Integer> LIMITE = createField(DSL.name("limite"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cliente.saldo</code>.
     */
    public final TableField<ClienteRecord, Integer> SALDO = createField(DSL.name("saldo"), SQLDataType.INTEGER.nullable(false), this, "");

    private Cliente(Name alias, Table<ClienteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cliente(Name alias, Table<ClienteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cliente</code> table reference
     */
    public Cliente(String alias) {
        this(DSL.name(alias), CLIENTE);
    }

    /**
     * Create an aliased <code>public.cliente</code> table reference
     */
    public Cliente(Name alias) {
        this(alias, CLIENTE);
    }

    /**
     * Create a <code>public.cliente</code> table reference
     */
    public Cliente() {
        this(DSL.name("cliente"), null);
    }

    public <O extends Record> Cliente(Table<O> child, ForeignKey<O, ClienteRecord> key) {
        super(child, key, CLIENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ClienteRecord, Long> getIdentity() {
        return (Identity<ClienteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClienteRecord> getPrimaryKey() {
        return Keys.CLIENTE_PKEY;
    }

    @Override
    public List<Check<ClienteRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("saldo_limite_check"), "((saldo >= (- limite)))", true)
        );
    }

    @Override
    public Cliente as(String alias) {
        return new Cliente(DSL.name(alias), this);
    }

    @Override
    public Cliente as(Name alias) {
        return new Cliente(alias, this);
    }

    @Override
    public Cliente as(Table<?> alias) {
        return new Cliente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(String name) {
        return new Cliente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Name name) {
        return new Cliente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Table<?> name) {
        return new Cliente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
