/*
 * This file is generated by jOOQ.
 */
package br.rinha.meta.tables.records;


import br.rinha.meta.tables.Cliente;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClienteRecord extends UpdatableRecordImpl<ClienteRecord> implements Record3<Long, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.cliente.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.cliente.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.cliente.limite</code>.
     */
    public void setLimite(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.cliente.limite</code>.
     */
    public Integer getLimite() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.cliente.saldo</code>.
     */
    public void setSaldo(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.cliente.saldo</code>.
     */
    public Integer getSaldo() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Cliente.CLIENTE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Cliente.CLIENTE.LIMITE;
    }

    @Override
    public Field<Integer> field3() {
        return Cliente.CLIENTE.SALDO;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getLimite();
    }

    @Override
    public Integer component3() {
        return getSaldo();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getLimite();
    }

    @Override
    public Integer value3() {
        return getSaldo();
    }

    @Override
    public ClienteRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ClienteRecord value2(Integer value) {
        setLimite(value);
        return this;
    }

    @Override
    public ClienteRecord value3(Integer value) {
        setSaldo(value);
        return this;
    }

    @Override
    public ClienteRecord values(Long value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClienteRecord
     */
    public ClienteRecord() {
        super(Cliente.CLIENTE);
    }

    /**
     * Create a detached, initialised ClienteRecord
     */
    public ClienteRecord(Long id, Integer limite, Integer saldo) {
        super(Cliente.CLIENTE);

        setId(id);
        setLimite(limite);
        setSaldo(saldo);
        resetChangedOnNotNull();
    }
}
